#!/bin/perl
#
# Script to generate Throwable exceptions from Fault classes
#
# Usage:
#       perl generateFaultExceptions.pl <soure folder> (<destination folder>)
#  
#       If no destination folder is set, the Exception will be created into the
#       same directory as the Fault class
#

# Config part =================================================================
my $pathRoot = "eu/";

my @commonFiles = ("BaseFaultType", "EndpointReferenceType", "AttributedURIType", "ReferenceParametersType", "MetadataType");

my $extensionPackage = "eu.ist_phosphorus.harmony.common.serviceinterface.databinding.utils";
my $extensionClass = "AbstractFaultException";

my @commonDependencies = ("ObjectFactory.java", "ProblemActionType.java");
# Do not edit below this line =================================================

my $inDir = $ARGV[0];
my $commonClasses = $inDir;
my $outDir = $ARGV[1];
my $customExtension;

if( $outDir eq "" ) {
    $outDir = $inDir;
}

# Check params
sub init() {
    if( $inDir eq "" ) {
        print "\nUsage:\n";
        print "\tperl generateFaultExceptions.pl <soure folder> (<destination folder>)\n\n";
        print "\tIf no destination folder is set, the Exception will be created into the same directory as the Fault class\n\n";
        die;
    }
    
    #Common classes directory
    if (!(-e $commonClasses)) {
        mkdir($commonClasses, 0755) || die "Cannot mkdir newdir: $commonClasses $!";
    }
    
    #Output exceptions directory
    if (!(-e $outDir)) {
    print "$outDir";
        mkdir($outDir, 0755) || die "Cannot mkdir newdir: $!";
    }

}

# convert unix file path to java package format
sub path2package {
    my $res = shift;
    
    # start all paths at specified root path!
    $res =~ s/.*$pathRoot/$pathRoot/g;
    $res =~ s/\//./g;
    $res =~ s/\.$//g;
    
    return $res;
}

# create package for exception class
sub createPackage {
    my $res = path2package($outDir);
    
    $res = "package ".$res.";\n\n";
    
    return $res;
}

# crerate imports and package for exception class
sub createHeader {
    my $fileName = shift;
    my $res;
    
    my $srcPackage = path2package($inDir);
    
    $fileName =~ s/.java//g;
    
    my $package = path2package($outDir);
    
    $res = "package ".$package.";\n\n";
    
    $res .= "import ".$srcPackage.".".$fileName.";\n";
    $res .= "import eu.ist_phosphorus.harmony.common.serviceinterface.databinding.jaxb.BaseFaultType;\n";
    
    if($package ne $extensionPackage) {
        $res .= "import ".$extensionPackage.".".$extensionClass.";\n";
    }
    
    $res .= "\n";

    return $res;
}

# create class body for exception class
sub createClassBody {
    my $fileName = shift;
    my $extension = shift;
    
    $fileName =~ s/.java//g;

    my $res = "public class ".$fileName."\n        extends ".$extension." {\n\n";
    
    return $res;
}

# create comments for exception class
sub createComment {
    my $now = localtime time;
    
    my $res = "/**\n";
    $res   .= " * Autogenerated Fault Exception.\n";
    $res   .= " *\n";
    $res   .= " * Generated by scripts/generateFaultExceptions.java\n";
    $res   .= " * Created on $now\n";
    $res   .= " */\n";
    return $res;
}

# create constructors for exception class
sub createConstructors {
    my $inName = shift;
    my $outName = shift;
    
    $inName =~ s/.java//g;
    $outName =~ s/.java//g;
    
    my $res = "";
    
    $res .= "    /**\n";
    $res .= "     * Autogenerated Constructor.\n";
    $res .= "     *\n";
    $res .= "     * \@param message Message to be thrown\n";
    $res .= "     * \@param cause   Originator exception\n";
    $res .= "     */\n";
    $res .= "    public ".$outName."(final String message,\n";
    $res .= "            final Throwable cause) {\n";
    $res .= "        super(new ".$inName."(), message, cause);\n";
    $res .= "        // TODO Auto-generated constructor stub\n";
    $res .= "    }\n\n";
    
    $res .= "    /**\n";
    $res .= "     * Autogenerated Constructor.\n";
    $res .= "     *\n";
    $res .= "     * \@param message Message to be thrown\n";
    $res .= "     */\n";
    $res .= "    public ".$outName."(final String message) {\n";
    $res .= "        super(new ".$inName."(), message);\n";
    $res .= "        // TODO Auto-generated constructor stub\n";
    $res .= "    }\n\n";

    $res .= "    /**\n";
    $res .= "     * Autogenerated Constructor.\n";
    $res .= "     *\n";
    $res .= "     * \@param cause   Originator exception\n";
    $res .= "     */\n";    
    $res .= "    public ".$outName."(final Throwable cause) {\n";
    $res .= "        super(new ".$inName."(), cause);\n";
    $res .= "        // TODO Auto-generated constructor stub\n";
    $res .= "    }\n\n";

    $res .= "    /**\n";
    $res .= "     * Autogenerated Constructor.\n";
    $res .= "     */\n";    
    $res .= "    public ".$outName."() {\n";
    $res .= "        super(new ".$inName."());\n";
    $res .= "        // TODO Auto-generated constructor stub\n";
    $res .= "    }\n\n";
    
    # Exctension constructors
    
    $res .= "    /**\n";
    $res .= "     * Autogenerated Extension Constructor.\n";
    $res .= "     *\n";
    $res .= "     * \@param fault BaseFault\n";
    $res .= "     * \@param message Message to be thrown\n";
    $res .= "     * \@param cause   Originator exception\n";
    $res .= "     */\n";
    $res .= "    public ".$outName."(final BaseFaultType fault, final String message,\n";
    $res .= "            final Throwable cause) {\n";
    $res .= "        super(fault, message, cause);\n";
    $res .= "        // TODO Auto-generated constructor stub\n";
    $res .= "    }\n\n";
    
    $res .= "    /**\n";
    $res .= "     * Autogenerated Extension Constructor.\n";
    $res .= "     *\n";
    $res .= "     * \@param fault BaseFault\n";
    $res .= "     * \@param message Message to be thrown\n";
    $res .= "     */\n";
    $res .= "    public ".$outName."(final BaseFaultType fault, final String message) {\n";
    $res .= "        super(fault, message);\n";
    $res .= "        // TODO Auto-generated constructor stub\n";
    $res .= "    }\n\n";

    $res .= "    /**\n";
    $res .= "     * Autogenerated Extension Constructor.\n";
    $res .= "     *\n";
    $res .= "     * \@param fault BaseFault\n";
    $res .= "     * \@param cause   Originator exception\n";
    $res .= "     */\n";    
    $res .= "    public ".$outName."(final BaseFaultType fault, final Throwable cause) {\n";
    $res .= "        super(fault, cause);\n";
    $res .= "        // TODO Auto-generated constructor stub\n";
    $res .= "    }\n\n";

    $res .= "    /**\n";
    $res .= "     * Autogenerated Extension Constructor.\n";
    $res .= "     *\n";
    $res .= "     * \@param fault BaseFault\n";
    $res .= "     */\n";    
    $res .= "    public ".$outName."(final BaseFaultType fault) {\n";
    $res .= "        super(fault);\n";
    $res .= "        // TODO Auto-generated constructor stub\n";
    $res .= "    }\n\n";


    return $res;
}

# put all the stuff together and write it into a cute little file
sub generateFile {
    my $inName = shift;
    my $type = shift;
    my $outName = $inName;
    
    $outName =~ s/Fault.java/FaultException.java/g;
    
    my $extension = $extensionClass;
    
    if(2 == $type) {
        $extension = $customExtension;
        $customExtension = "";
    } 

    open(DAT, "+>".$outDir."/".$outName);
    
    print DAT createHeader($inName);
    
    print DAT createComment();
    
    print DAT createClassBody($outName, $extension);
    
    print DAT createConstructors($inName,$outName);

    print DAT "}\n";
    
    close(DAT);
}

# Method to refactor source files
sub refactorSourceFile {
    my $fileName = shift;
    my $dir = shift;
    my $old = shift;
    my $new = shift;
    
    open(DAT, $dir."/".$fileName) || die "Cannot open file $dir/$fileName: $!";
    @raw_data=<DAT>;
    close(DAT);
    
    foreach $line (@raw_data) {
        $line =~ s/$old/$new/g;
    }
    
    my $fileContent = join("", @raw_data);
    
    open(DAT, "+>".$dir."/".$fileName);
    print DAT $fileContent;
    close(DAT);
}

# Adjust dependencies in other jaxb classes
sub adjustDependencies {
    my $newPackage = path2package($commonClasses);
    
    foreach $file (@commonDependencies) {
        
        open(DAT, $inDir."/".$file) || die "Cannot open file $inDir/$file: $!";
        @raw_data=<DAT>;
        close(DAT);
    
        foreach $line (@raw_data) {
            foreach $class (@commonFiles) {
                $line =~ s/([^a-zA-Z])$class/$1$newPackage.$class/g;
            }   
        }

        my $fileContent = join("", @raw_data);
    
        open(DAT, "+>".$inDir."/".$file);
        print DAT $fileContent;
        close(DAT);
    }
}

# Move and refactor common jaxb classes to common package
sub moveCommonFiles {
    foreach $file (@commonFiles) {
    	my $src = $inDir."/".$file.".java";
	my $dst = $commonClasses."/".$file.".java";
	rename($src, $dst);
        
        refactorSourceFile($file.".java", $commonClasses, "package .*", "package ".path2package($commonClasses).";");
    }
}

# check if source file is extended from BaseFaultType
sub checkFaultType {
    my $inName = shift;
    
    open(DAT, $inDir."/".$inName) || die "Cannot open file $inDir/$inName: $!";
    @raw_data=<DAT>;
    close(DAT);
    
    foreach $line (@raw_data) {
        if ( $line =~ m/extends BaseFaultType/) {
            return 1;
        }
    }
    
    foreach $line (@raw_data) {
        if ( $line =~ m/extends [a-zA-Z]*Fault/) {
            $line =~s/.*extends ([a-zA-Z]*) *\n/$1/g;
            $customExtension = $line."Exception";
            return 2;
        }
    }
    
    print "Wrong input file format $inName: Must extend BaseFaultType\n";
    
    return 0;
}

# Start here:
init();

opendir(INDIR, $inDir) || die "Cannot chdir to $inDir ($!)";
@files = grep(/\Fault.java$/,readdir(INDIR));
closedir(INDIR);

foreach $file (@files) {
    my $faultType = checkFaultType($file);
    
    if($faultType > 0) {
        print "Generating Exception for ".$file."...\n";
        generateFile($file, $faultType);
    }
    
    if(1 == $faultType) {
        refactorSourceFile($file, $inDir, "extends BaseFaultType", "extends ".path2package($commonClasses).".BaseFaultType");
    } elsif (2 == $faultType) {
    }
    
    
}

moveCommonFiles();
adjustDependencies();

print "Done!\n"
