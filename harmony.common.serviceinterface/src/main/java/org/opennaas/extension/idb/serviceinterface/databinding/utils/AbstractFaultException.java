/**
 *  This code is part of the Harmony System implemented in Work Package 1 
 *  of the Phosphorus project. This work is supported by the European 
 *  Comission under the Sixth Framework Programme with contract number 
 *  IST-034115.
 *
 *  Copyright (C) 2006-2009 Phosphorus WP1 partners. Phosphorus Consortium.
 *  http://ist-phosphorus.eu/
 *
 * This is free software; you can redistribute it and/or modify it
 * under the terms of the GNU Lesser General Public License as
 * published by the Free Software Foundation; either version 2.1 of
 * the License, or (at your option) any later version.
 *
 * This software is distributed in the hope that it will be useful,
 * but WITHOUT ANY WARRANTY; without even the implied warranty of
 * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the GNU
 * Lesser General Public License for more details.
 *
 * You should have received a copy of the GNU Lesser General Public
 * License along with this software; if not, write to the Free
 * Software Foundation, Inc., 51 Franklin St, Fifth Floor, Boston, MA
 * 02110-1301 USA, or see the FSF site: http://www.fsf.org.
 */

/**
 *
 */
package org.opennaas.extension.idb.serviceinterface.databinding.utils;

import org.apache.muse.ws.addressing.soap.SoapFault;
import org.w3c.dom.Element;

import org.opennaas.extension.idb.serviceinterface.databinding.jaxb.BaseFaultType;
import org.opennaas.extension.idb.serviceinterface.databinding.jaxb.UnexpectedFault;
import org.opennaas.extension.idb.serviceinterface.databinding.jaxb.BaseFaultType.Description;
import org.opennaas.extension.idb.serviceinterface.databinding.jaxb.BaseFaultType.FaultCause;
import org.opennaas.core.utils.Helpers;

/**
 * @author gassen
 */
public class AbstractFaultException extends SoapFault {

    /** Autogenerated Version Id. */
    private static final long serialVersionUID = 760266496889893932L;

    /** * */
    private BaseFaultType faultClass = null;

    /** Serializer. */
    private final AJaxbSerializer serializer;

    /**
     * Custom Constructor. Converts BaseFault object to Element and calls
     * default Constructor
     * 
     * @param fault
     *            BaseFaultType Object
     */
    public AbstractFaultException(final BaseFaultType fault) {
        super((String) null);

        this.faultClass = fault;
        this.serializer = this.getSerializer();
        this.generateDetail();
    }

    /**
     * Custom Constructor. Gets QName from BaseFaultType Object
     * 
     * @param fault
     *            BaseFaultType Object
     * @param message
     *            Message
     */
    public AbstractFaultException(final BaseFaultType fault,
            final String message) {
        super(message);

        this.faultClass = fault;
        this.serializer = this.getSerializer();
        this.generateDetail();
    }

    /**
     * Custom Constructor. Gets QName from BaseFaultType Object
     * 
     * @param fault
     *            BaseFaultType Object
     * @param message
     *            Message
     * @param cause
     *            Throwable
     */
    public AbstractFaultException(final BaseFaultType fault,
            final String message, final Throwable cause) {
        super(message, cause);

        this.faultClass = fault;
        this.serializer = this.getSerializer();
        this.generateDetail();
    }

    /**
     * Custom Constructor. Gets QName from BaseFaultType Object
     * 
     * @param fault
     *            BaseFaultType Object
     * @param cause
     *            Throwable
     */
    public AbstractFaultException(final BaseFaultType fault,
            final Throwable cause) {
        super(cause);

        this.faultClass = fault;
        this.serializer = this.getSerializer();
        this.generateDetail();
    }

    /**
     * Private Constructor without detail generation.
     * 
     * @param cause
     * @param fault
     */
    private AbstractFaultException(final Throwable cause,
            final BaseFaultType fault, final AJaxbSerializer serializer) {

        super(cause.getMessage());

        this.serializer = serializer;
        this.faultClass = fault;
    }

    /**
     * Generate fault details.
     */
    public final void generateDetail() {
        if (null == this.faultClass) {
            return;
        }

        this.faultClass.setTimestamp(Helpers.generateXMLCalendar());

        this.generateStackTraces();

        this.setDetail(this.getElement(this.faultClass));
    }

    /**
     * Converts the Stacktrace to xml elements.
     */
    private final void generateStackTraces() {
        final Description stackTrace = new Description();
        stackTrace.setValue(Helpers.stackTraceToXML(this));
        stackTrace.setLang("stack");

        this.faultClass.getDescription().add(stackTrace);

        final Description message = new Description();
        message.setValue(this.getMessage());
        message.setLang("message");

        this.faultClass.getDescription().add(message);

        if (null != this.getCause()) {
            final FaultCause fault = new FaultCause();

            AbstractFaultException ex = null;

            if (AbstractFaultException.class.isInstance(this.getCause())) {
                ex = (AbstractFaultException) this.getCause();
            } else {
                ex = this.getFaultCopy(this.getCause(), UnexpectedFault.class);
            }

            fault.setAny(this.getElement(ex.getDetailObject()));

            this.faultClass.setFaultCause(fault);
        }
    }

    /**
     * Return own details as object.
     * 
     * @return BaseFaultType Element
     */
    public final BaseFaultType getDetailObject() {
        return this.faultClass;
    }

    /**
     * Tries to convert a BaseFaultType into an Element. Returns null in case of
     * errors.
     * 
     * @param fault
     *            BaseFaultType Object
     * @return BaseFaultType Element
     */
    private Element getElement(final BaseFaultType fault) {
        try {
            final Element element = this.serializer.objectToElement(fault,
                    false); // don't
            // validate
            // our
            // own
            // exception
            // , or
            // we
            // might
            // end
            // up in
            // an
            // infinite
            // loop!

            return element;
        } catch (final Exception e) {
            return null;
        }
    }

    /**
     * Creates a SoapFault copy of a java.lang.Throwable.
     * 
     * @param cause
     *            Throwable
     * @param type
     *            Type of Exception to what it should be converted
     * @return The converted exception
     */
    public final AbstractFaultException getFaultCopy(final Throwable cause,
            final Class<? extends BaseFaultType> type) {

        AbstractFaultException result = null;

        try {
            final BaseFaultType baseFault = type.newInstance();

            final Description stackTrace = new Description();
            stackTrace.setValue(cause.getClass().getName());
            stackTrace.setLang("cause");

            baseFault.getDescription().add(stackTrace);

            result = new AbstractFaultException(cause, baseFault,
                    this.serializer);

            result.setStackTrace(cause.getStackTrace());
            result.initCause(cause.getCause());

            result.generateDetail();
        } catch (final Exception e) {
            // Should really never happen...
            e.printStackTrace();
        }

        return result;
    }

    /**
     * Returns the default Serializer. If you like to use a different serializer
     * overwrite this method!
     * 
     * @return Serializer
     */
    protected AJaxbSerializer getSerializer() {
        return JaxbSerializer.getInstance();
    }

}
